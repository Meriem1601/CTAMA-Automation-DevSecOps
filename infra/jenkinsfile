pipeline {
    agent { label 'Eks-Agent' }

    environment {
        AWS_CREDENTIALS = credentials('aws-credentials')
        GIT_CREDENTIALS = credentials('git-credentials')
    }

    stages {
        stage('Verify Tools') {
            steps {
                script {
                    def tools = ['terraform', 'ansible', 'aws']
                    tools.each { tool ->
                        if (sh(script: "${tool} --version", returnStatus: true) != 0) {
                            error "${tool} is not installed or not in PATH"
                        }
                    }
                    echo "All required tools are installed"
                }
            }
        }

        stage('Checkout Code') {
            steps {
                git branch: 'main', 
                    url: 'https://github.com/Meriem1601/CTAMA-Automation-DevSecOps.git', 
                    credentialsId: 'git-credentials'
            }
        }

        stage('Terraform Init and Apply') {
            steps {
                dir('infra') {
                    withAWS(credentials: 'aws-credentials') {
                        script {
                            try {
                                sh 'terraform init'
                                sh 'terraform apply -auto-approve'
                            } catch (Exception e) {
                                error "Terraform failed: ${e.getMessage()}"
                            }
                        }
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                dir('infra') {
                    withAWS(credentials: 'aws-credentials') {
                        script {
                            try {
                                sh 'ansible-playbook -i hosts playbook.yml'
                            } catch (Exception e) {
                                error "Ansible playbook failed: ${e.getMessage()}"
                            }
                        }
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                dir('infra') {
                    script {
                        try {
                            def nodes = sh(script: 'kubectl get nodes --kubeconfig=/home/ubuntu/.kube/config -o json', returnStdout: true)
                            def nodeCount = readJSON(text: nodes).items.size()
                            echo "Kubernetes cluster has ${nodeCount} nodes"
                            if (nodeCount < 2) {
                                error "Expected at least 2 nodes, but found ${nodeCount}"
                            }
                        } catch (Exception e) {
                            error "Failed to verify deployment: ${e.getMessage()}"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Deployment completed successfully!'
        }
        failure {
            echo 'Deployment failed. Please check the logs for details.'
        }
    }
}