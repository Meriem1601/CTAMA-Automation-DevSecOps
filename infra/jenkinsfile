pipeline {
    agent { label 'Eks-Agent' }

    environment {
        AWS_CREDENTIALS = credentials('aws-credentials')
        GIT_CREDENTIALS = credentials('git-credentials')
    }

    stages {
        stage('Verify Tools Installation') {
            steps {
                sh '''
                echo "Verifying Terraform installation..."
                if terraform --version > /dev/null 2>&1; then
                    echo "Terraform is installed"
                else
                    echo "Terraform is NOT installed"
                    exit 1
                fi

                echo "Verifying Ansible installation..."
                if ansible --version > /dev/null 2>&1; then
                    echo "Ansible is installed"
                else
                    echo "Ansible is NOT installed"
                    exit 1
                fi

                echo "Verifying AWS CLI installation..."
                if aws --version > /dev/null 2>&1; then
                    echo "AWS CLI is installed"
                else
                    echo "AWS CLI is NOT installed"
                    exit 1
                fi
                '''
            }
        }

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/Meriem1601/CTAMA-Automation-DevSecOps.git', credentialsId: "${GIT_CREDENTIALS}"
            }
        }

        stage('Terraform Init and Apply') {
            steps {
                dir('infra') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDENTIALS}"]]) {
                        sh 'terraform init'
                        sh 'terraform apply -auto-approve'
                    }
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                dir('infra') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDENTIALS}"]]) {
                        sh 'ansible-playbook -i hosts playbook.yml'
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                dir('infra') {
                    sh '''
                    # Fetch Kubernetes nodes and verify they are correctly labeled
                    kubectl get nodes --kubeconfig=/home/ubuntu/.kube/config
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Deployment completed successfully!'
        }
        failure {
            echo 'Deployment failed. Please check the logs.'
        }
    }
}
