pipeline {
    agent {
        label 'EC2-Agent'
    }

    environment {
        NODE_ENV = 'development'
        APP_VERSION = '1.0.0'
        BUILD_TAG = "${APP_VERSION}-${BUILD_NUMBER}"
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    stages {
        stage('Install Dependencies') {
            steps {
                // Install dependencies
                sh '''
                    npm ci --prefer-offline
                    npm cache verify
                '''
            }
        }

        stage('Build Artifact') {
            steps {
                script {
                    // Create a production build
                    sh '''
                        npm run build
                        
                        # Create deployment package
                        tar -czf dist-${BUILD_TAG}.tar.gz \
                            dist/ \
                            package.json \
                            package-lock.json \
                            app.js \
                            server.js
                    '''
                    
                    // Archive the build artifact
                    archiveArtifacts artifacts: "dist-${BUILD_TAG}.tar.gz", fingerprint: true
                }
            }
        }
    }

    post {
        always {
            // Cleanup workspace
            cleanWs()
        }
        success {
            echo "Build ${BUILD_TAG} completed successfully"
        }
        failure {
            echo "Build ${BUILD_TAG} failed"
        }
    }
}
