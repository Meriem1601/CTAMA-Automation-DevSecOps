pipeline {
    agent {
        label 'EC2-Agent'
    }
    
    environment {
        // AWS Variables
        AWS_REGION = 'eu-north-1'
        ECR_REPOSITORY_NAME = 'ctama-devsecops-images'
        ECR_REPOSITORY_URI = "211125488393.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}"
        
        // GitHub Container Registry Variables
        GHCR_REGISTRY = 'ghcr.io'
        GITHUB_USERNAME = 'meriem1601'
        REPO_NAME = 'ctama-automation-devsecops'
        IMAGE_NAME = 'myapp'
        
        // Version and tag variables
        APP_VERSION = 'v1.2.0'
        BUILD_TAG = "${APP_VERSION}-${BUILD_NUMBER}"
        
        // GHCR full image name
        GHCR_IMAGE = "${GHCR_REGISTRY}/${GITHUB_USERNAME}/${REPO_NAME}"
        
        // Database Variables
        MYSQL_DATABASE = 'mydatabase'
        
        // Node environment
        NODE_ENV = 'production'
    }
    
    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    
    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    try {
                        sh 'npm ci'
                    } catch (Exception e) {
                        error "Failed to install dependencies: ${e.message}"
                    }
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    try {
                        sh 'npm test'
                    } catch (Exception e) {
                        error "Tests failed: ${e.message}"
                    }
                }
            }
        }
        
        stage('Start MySQL') {
            steps {
                script {
                    try {
                        def mysqlStatus = sh(script: "docker ps -f name=mysql --format '{{.Names}}'", returnStdout: true).trim()
                        if (mysqlStatus != 'mysql') {
                            sh '''
                                docker run --name mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql:latest
                                echo "Waiting for MySQL to be ready..."
                                for i in $(seq 1 30); do
                                    if docker exec mysql mysqladmin ping -h localhost -u root -proot --silent; then
                                        echo "MySQL is ready"
                                        break
                                    fi
                                    echo "Waiting for MySQL to be ready... $i/30"
                                    sleep 2
                                done
                            '''
                        }
                    } catch (Exception e) {
                        error "MySQL setup failed: ${e.message}"
                    }
                }
            }
        }
        
        stage('Initialize Database') {
            steps {
                script {
                    try {
                        sh """
                            docker exec mysql mysql -uroot -proot -e 'CREATE DATABASE IF NOT EXISTS ${MYSQL_DATABASE};'
                        """
                    } catch (Exception e) {
                        error "Database initialization failed: ${e.message}"
                    }
                }
            }
        }
        
        stage('Security Checks') {
            parallel {
                stage('SonarQube Analysis') {
                    steps {
                        script {
                            sh """
                                sonar-scanner \
                                  -Dsonar.projectKey=CTAMA-Automation-DevSecOps \
                                  -Dsonar.sources=. \
                                  -Dsonar.host.url=http://16.16.118.25:9000 \
                                  -Dsonar.token=sqp_8f9c8b21d8f7065aa3e059f4ba0a739af3760009
                            """
                        }
                    }
                }
                
                stage('OWASP Dependency Check') {
                    steps {
                        script {
                            sh '''
                                dependency-check.sh --scan . \
                                    --format JSON --format HTML --prettyPrint \
                                    --suppressionFile suppress.xml \
                                    --out dependency-check-report
                            '''
                        }
                    }
                    post {
                        always {
                            publishHTML(target: [
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: '.',
                                reportFiles: 'dependency-check-report.html',
                                reportName: 'Dependency Check Report'
                            ])
                        }
                    }
                }
            }
        }
        
        stage('Build and Push to GHCR') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                        // Add your build and push steps here
                    }
                }
            }
        }
    }
}
