pipeline {
    agent {
        label 'EC2-Agent'
    }
    
    environment {
        // AWS Variables
        AWS_REGION = 'eu-north-1'
        ECR_REPOSITORY_NAME = 'ctama-devsecops-images'
        ECR_REPOSITORY_URI = "211125488393.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}"
        
        // GitHub Container Registry Variables
        GHCR_REGISTRY = 'ghcr.io'
        GITHUB_USERNAME = 'meriem1601'
        REPO_NAME = 'ctama-automation-devsecops'
        IMAGE_NAME = 'myapp'
        
        // Version and tag variables
        APP_VERSION = 'v1.2.0'
        BUILD_TAG = "${APP_VERSION}-${BUILD_NUMBER}"
        
        // GHCR full image name
        GHCR_IMAGE = "${GHCR_REGISTRY}/${GITHUB_USERNAME}/${REPO_NAME}"
        
        // Node environment
        NODE_ENV = 'production'
    }
    
    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    
    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    try {
                        sh 'npm ci'
                    } catch (Exception e) {
                        error "Failed to install dependencies: ${e.message}"
                    }
                }
            }
        }
        
        stage('Security Checks') {
            parallel {
                stage('SonarQube Analysis') {
                    steps {
                        script {
                            sh """
                                sonar-scanner \
                                  -Dsonar.projectKey=CTAMA-Automation-DevSecOps \
                                  -Dsonar.sources=. \
                                  -Dsonar.host.url=http://16.16.118.25:9000 \
                                  -Dsonar.token=sqp_8f9c8b21d8f7065aa3e059f4ba0a739af3760009
                            """
                        }
                    }
                }
                
                stage('OWASP Dependency Check') {
                    steps {
                        script {
                            sh '''
                                dependency-check.sh --scan . \
                                    --format JSON --format HTML --prettyPrint \
                                    --suppressionFile suppress.xml \
                                    --out dependency-check-report
                            '''
                        }
                    }
                    post {
                        always {
                            publishHTML(target: [
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: '.',
                                reportFiles: 'dependency-check-report.html',
                                reportName: 'Dependency Check Report'
                            ])
                        }
                    }
                }
            }
        }
        
        stage('Build and Push to GHCR') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                        sh """
                            echo \$GITHUB_TOKEN | docker login ${GHCR_REGISTRY} -u ${GITHUB_USERNAME} --password-stdin
                            
                            docker build -t ${GHCR_IMAGE}:${BUILD_TAG} .
                            docker push ${GHCR_IMAGE}:${BUILD_TAG}
                            
                            if [ "${BRANCH_NAME}" = "main" ]; then
                                docker tag ${GHCR_IMAGE}:${BUILD_TAG} ${GHCR_IMAGE}:latest
                                docker push ${GHCR_IMAGE}:latest
                            fi
                        """
                    }
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                script {
                    try {
                        sh """
                            # Run Trivy vulnerability scan
                            trivy image ${GHCR_IMAGE}:${BUILD_TAG} \
                                --format template \
                                --template '@/usr/local/share/trivy/templates/html.tpl' \
                                --output trivy-report.html

                            # Also run a failure-threshold scan
                            trivy image ${GHCR_IMAGE}:${BUILD_TAG} \
                                --exit-code 1 \
                                --severity HIGH,CRITICAL
                        """
                    } catch (Exception e) {
                        unstable('Trivy found vulnerabilities')
                        error "Trivy scan failed: ${e.message}"
                    }
                }
            }
            post {
                always {
                    publishHTML(target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: '.',
                        reportFiles: 'trivy-report.html',
                        reportName: 'Trivy Scan Report'
                    ])
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    withCredentials([
                        [$class: 'AmazonWebServicesCredentialsBinding', 
                         credentialsId: 'aws-credentials',
                         accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                         secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
                    ]) {
                        sh """
                            # Login to AWS ECR
                            aws ecr get-login-password --region ${AWS_REGION} | \
                            docker login --username AWS --password-stdin ${ECR_REPOSITORY_URI}

                            # Tag and push to ECR
                            docker tag ${GHCR_IMAGE}:${BUILD_TAG} ${ECR_REPOSITORY_URI}:${BUILD_TAG}
                            docker push ${ECR_REPOSITORY_URI}:${BUILD_TAG}

                            if [ "${BRANCH_NAME}" = "main" ]; then
                                docker tag ${ECR_REPOSITORY_URI}:${BUILD_TAG} ${ECR_REPOSITORY_URI}:latest
                                docker push ${ECR_REPOSITORY_URI}:latest
                            fi
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
            sh 'docker system prune -f'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed! Please check the logs for details.'
        }
    }
}
