pipeline {
    agent {
        label 'EC2-Agent'
    }

    environment {
        KUBECONFIG = '/root/.kube/config'
        MYSQL_DEPLOYMENT_DIR = 'mysql-deployment'
        BACKEND_DEPLOYMENT_DIR = 'backend-deployment'
        SLACK_CHANNEL = '#were-building-a-cutting-edge-devsecops-solution'
    }

    stages {
        stage('🚀 Validate Kubernetes Environment') {
            steps {
                script {
                    sh '''
                        echo "🌐 Checking Kubernetes cluster readiness..."
                        kubectl cluster-info
                        kubectl get nodes
                    '''
                }
            }
        }

        stage('🛡️ Verify Kyverno Security Policies') {
            steps {
                script {
                    try {
                        sh '''
                            echo "🔍 Checking Kyverno namespace and policies..."
                            kubectl get ns kyverno
                            kubectl get pods -n kyverno -o wide | grep Running
                            kubectl get clusterpolicies
                            kubectl get policies --all-namespaces
                        '''
                    } catch (Exception e) {
                        error "❌ Kyverno security validation failed: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('💾 Deploy MySQL Database') {
            steps {
                script {
                    sh '''
                        echo "🗄️ Deploying MySQL components..."
                        for resource in ${MYSQL_DEPLOYMENT_DIR}/*.yaml; do
                            if [ -f "$resource" ]; then
                                echo "📤 Applying $resource to devsecops-prod namespace"
                                kubectl apply -f "$resource" -n devsecops-prod
                            else
                                echo "❗ No MySQL deployment files found"
                                exit 1
                            fi
                        done
                        
                        # Wait for MySQL StatefulSet to be ready
                    '''
                }
            }
        }

        stage('🔍 Verify MySQL Deployment') {
            steps {
                script {
                    sh '''
                        echo "✅ Verifying MySQL deployment in devsecops-prod namespace..."
                        kubectl get statefulsets -n devsecops-prod
                        kubectl get services -n devsecops-prod | grep mysql
                        kubectl get pods -n devsecops-prod | grep mysql
                    '''
                }
            }
        }

        stage('🚢 Deploy Backend Application') {
            steps {
                script {
                    sh '''
                        echo "🔧 Deploying Backend components..."
                        for resource in ${BACKEND_DEPLOYMENT_DIR}/*.yaml; do
                            # Skip deployment.yaml to control rollout separately
                            if [[ "$resource" == *"deployment.yaml" ]]; then
                                echo "⏩ Skipping $resource"
                                continue
                            fi
                            
                            echo "📡 Applying $resource to devsecops-prod namespace"
                            kubectl apply -f "$resource" -n devsecops-prod
                        done
                    '''
                }
            }
        }

        stage('🕹️ Verify Backend Application') {
            steps {
                script {
                    sh '''
                        echo "🔬 Verifying backend app deployment in devsecops-prod namespace..."
                        kubectl get pods -n devsecops-prod | grep backend-app
                        kubectl get deployments -n devsecops-prod | grep backend-app
                    '''
                }
            }
        }
    }

    post {
        success {
            script {
                slackSend(
                    channel: SLACK_CHANNEL,
                    color: 'good',
                    tokenCredentialId: 'slack-webhook',
                    message: """
🎉 *Deployment Successfully Completed!* 🚀

*Deployment Details:*
- 💾 *MySQL Database*: Deployed and Verified
- 🚢 *Backend Application*: Rolled Out Successfully
- 🌐 *Namespace*: `devsecops-prod`

*Cluster Health:* 💚 All Systems Operational
*Deployment Time:* ⏱️ ${currentBuild.durationString}

*Deployed By:* 👤 ${env.BUILD_USER}
*Build Number:* #${env.BUILD_NUMBER}

*Quick Links:*
- Jenkins Build: ${env.BUILD_URL}
- Kubernetes Namespace: devsecops-prod

*Next Steps:* 🔍 Perform final application testing
"""
                )
            }
        }
        
        failure {
            script {
                slackSend(
                    channel: SLACK_CHANNEL,
                    color: 'danger',
                    tokenCredentialId: 'slack-webhook',
                    message: """
❌ *Deployment Failed!* 💥

*Error Summary:*
- 🚨 Deployment process encountered critical issues
- 🔍 Immediate investigation required

*Failure Details:*
- *Stage:* ${currentStage.name}
- *Build Number:* #${env.BUILD_NUMBER}

*Recommended Actions:*
1. 🕵️ Check Jenkins logs
2. 🔧 Review Kubernetes configurations
3. �logs Inspect detailed error messages

*Need Help?* 📞 Contact DevOps Support Team
"""
                )
            }
        }
        
        unstable {
            script {
                slackSend(
                    channel: SLACK_CHANNEL,
                    color: 'warning',
                    tokenCredentialId: 'slack-webhook',
                    message: """
⚠️ *Deployment Partially Successful* 🟨

*Status:* 🔶 Unstable Deployment Detected

*Potential Issues:*
- 🧩 Some components may not be fully initialized
- 🔬 Partial deployment success

*Deployment Insights:*
- *Build Number:* #${env.BUILD_NUMBER}
- *Namespace:* devsecops-prod

*Recommended Next Steps:*
1. 🔍 Conduct manual verification
2. 🧐 Review component statuses
3. 🔄 Consider re-running deployment

*Need Assistance?* 💬 Reach out to DevOps team
"""
                )
            }
        }
        
        always {
            cleanWs()
        }
    }
}
