pipeline {
    agent { 
        label 'EC2-Agent' 
    }
    
    environment {
        KUBECONFIG = '/root/.kube/config'
        POLICIES_DIR = 'kyverno-policies'
        MYSQL_DEPLOYMENT_DIR = 'mysql-deployment'
    }
    
    stages {
        stage('Check Kyverno') {
            steps {
                script {
                    sh '''
                        echo "Checking Kyverno namespace and pods..."
                        kubectl get ns kyverno
                        kubectl get pods -n kyverno | grep "Running"
                    '''
                }
            }
        }
        
        stage('Deploy Policies') {
            steps {
                script {
                    sh '''
                        for policy in ${POLICIES_DIR}/*.yaml; do
                            echo "Applying $policy"
                            kubectl apply -f "$policy"
                        done
                    '''
                }
            }
        }

        stage('Verify Policies') {
            steps {
                script {
                    sh '''
                        kubectl get clusterpolicies
                        kubectl get policies --all-namespaces
                    '''
                }
            }
        }

        stage('Deploy MySQL') {
            steps {
                script {
                    sh '''
                        echo "Deploying MySQL components..."
                        for resource in ${MYSQL_DEPLOYMENT_DIR}/*.yaml; do
                            echo "Applying $resource"
                            kubectl apply -f "$resource"
                        done
                    '''
                }
            }
        }

        stage('Verify MySQL Deployment') {
            steps {
                script {
                    sh '''
                        echo "Verifying MySQL deployment..."
                        kubectl get statefulsets
                        kubectl get services
                    '''
                }
            }
        }
    }
    
    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
        always {
            cleanWs()
        }
    }
}
