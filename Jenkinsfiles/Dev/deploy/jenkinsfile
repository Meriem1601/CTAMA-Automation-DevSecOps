pipeline {
    agent {
        label 'EC2-Agent'
    }

    environment {
        KUBECONFIG = '/root/.kube/config'
        MYSQL_DEPLOYMENT_DIR = 'mysql-deployment'
        BACKEND_DEPLOYMENT_DIR = 'backend-deployment'
    }

    stages {
        stage('Check Kyverno') {
            steps {
                script {
                    sh '''
                        echo "Checking Kyverno namespace and pods..."
                        kubectl get ns kyverno
                        kubectl get pods -n kyverno | grep "Running"
                    '''
                }
            }
        }

        stage('Verify Policies') {
            steps {
                script {
                    sh '''
                        echo "Verifying Kyverno policies:"
                        kubectl get clusterpolicies
                        kubectl get policies --all-namespaces
                    '''
                }
            }
        }

        stage('Deploy MySQL') {
            steps {
                script {
                    sh '''
                        echo "Deploying MySQL components..."
                        for resource in ${MYSQL_DEPLOYMENT_DIR}/*.yaml; do
                            echo "Applying $resource to devsecops-prod namespace"
                            kubectl apply -f "$resource" -n devsecops-prod
                        done
                    '''
                }
            }
        }

        stage('Verify MySQL Deployment') {
            steps {
                script {
                    sh '''
                        echo "Verifying MySQL deployment in devsecops-prod namespace..."
                        kubectl get statefulsets -n devsecops-prod
                        kubectl get services -n devsecops-prod
                    '''
                }
            }
        }

        stage('Deploy Backend') {
            steps {
                script {
                    sh '''
                        echo "Deploying Backend components..."
                        for resource in ${BACKEND_DEPLOYMENT_DIR}/*.yaml; do
                            if [[ "$resource" == *"deployment.yaml" ]]; then
                                echo "Skipping $resource"
                                continue
                            fi
                            echo "Applying $resource to devsecops-prod namespace"
                            kubectl apply -f "$resource" -n devsecops-prod
                        done
                    '''
                }
            }
        }

        stage('Verify Backend App') {
            steps {
                script {
                    sh '''
                        echo "Verifying backend app deployment in devsecops-prod namespace..."
                        kubectl get pods -n devsecops-prod | grep backend-app
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
        always {
            cleanWs()
        }
    }
}
