pipeline {
    agent {
        label 'EC2-Agent'
    }

    environment {
        KUBECONFIG = '/root/.kube/config'
        MYSQL_DEPLOYMENT_DIR = 'mysql-deployment'
        BACKEND_DEPLOYMENT_DIR = 'backend-deployment'
        SLACK_CHANNEL = '#all-devsecopsmasters'
    }

    stages {
        stage('Check Kyverno') {
            steps {
                script {
                    echo "Checking Kyverno namespace and pods..."
                    sh '''
                        kubectl get ns kyverno
                        kubectl get pods -n kyverno | grep "Running"
                    '''
                }
            }
        }

        stage('Verify Policies') {
            steps {
                script {
                    echo "Verifying Kyverno policies..."
                    sh '''
                        kubectl get clusterpolicies
                        kubectl get policies --all-namespaces
                    '''
                }
            }
        }

        stage('Deploy MySQL') {
            steps {
                script {
                    echo "Deploying MySQL components..."
                    sh '''
                        for resource in ${MYSQL_DEPLOYMENT_DIR}/*.yaml; do
                            echo "Applying $resource to devsecops-prod namespace"
                            kubectl apply -f "$resource" -n devsecops-prod
                        done
                    '''
                }
            }
        }

        stage('Verify MySQL Deployment') {
            steps {
                script {
                    echo "Verifying MySQL deployment in devsecops-prod namespace..."
                    sh '''
                        kubectl get statefulsets -n devsecops-prod
                        kubectl get services -n devsecops-prod
                    '''
                }
            }
        }

        stage('Deploy Backend') {
            steps {
                script {
                    echo "Deploying Backend components..."
                    sh '''
                        for resource in ${BACKEND_DEPLOYMENT_DIR}/*.yaml; do
                            if [[ "$resource" == *"deployment.yaml" ]]; then
                                echo "Skipping $resource"
                                continue
                            fi
                            echo "Applying $resource to devsecops-prod namespace"
                            kubectl apply -f "$resource" -n devsecops-prod
                        done
                    '''
                }
            }
        }

        stage('Verify Backend App') {
            steps {
                script {
                    echo "Verifying backend app deployment in devsecops-prod namespace..."
                    sh '''
                        kubectl get pods -n devsecops-prod | grep backend-app
                    '''
                }
            }
        }
    }

    post {
        success {
            script {
                slackSend(
                    channel: SLACK_CHANNEL,
                    color: 'good',
                    tokenCredentialId: 'slack-webhook',  // Using the Jenkins credential for Slack webhook
                    attachments: [
                        [
                            "fallback": "Deployment Successful! :tada:",
                            "color": "#36a64f",
                            "pretext": "*Deployment Successful!* :tada:",
                            "text": "The deployment of **MySQL** and **Backend** components has completed successfully in the `devsecops-prod` namespace.",
                            "footer": "Jenkins Pipeline",
                            "footer_icon": "https://www.jenkins.io/images/logos/jenkins/jenkins.png",
                            "ts": "${System.currentTimeMillis() / 1000}"
                        ]
                    ]
                )
            }
            echo 'Deployment successful!'
        }
        failure {
            script {
                slackSend(
                    channel: SLACK_CHANNEL,
                    color: 'danger',
                    tokenCredentialId: 'slack-webhook',  // Using the Jenkins credential for Slack webhook
                    attachments: [
                        [
                            "fallback": "Deployment Failed! :x:",
                            "color": "#FF0000",
                            "pretext": "*Deployment Failed!* :x:",
                            "text": "The deployment has failed during the **MySQL** or **Backend** component setup. Please check the logs and review the error messages.",
                            "footer": "Jenkins Pipeline",
                            "footer_icon": "https://www.jenkins.io/images/logos/jenkins/jenkins.png",
                            "ts": "${System.currentTimeMillis() / 1000}"
                        ]
                    ]
                )
            }
            echo 'Deployment failed!'
        }
        unstable {
            script {
                slackSend(
                    channel: SLACK_CHANNEL,
                    color: 'warning',
                    tokenCredentialId: 'slack-webhook',  // Using the Jenkins credential for Slack webhook
                    attachments: [
                        [
                            "fallback": "Deployment is unstable! :warning:",
                            "color": "#FFCC00",
                            "pretext": "*Deployment is unstable* :warning:",
                            "text": "The deployment might be unstable. Please verify the state of the deployed components and resources.",
                            "footer": "Jenkins Pipeline",
                            "footer_icon": "https://www.jenkins.io/images/logos/jenkins/jenkins.png",
                            "ts": "${System.currentTimeMillis() / 1000}"
                        ]
                    ]
                )
            }
        }
        always {
            cleanWs()
        }
    }
}
