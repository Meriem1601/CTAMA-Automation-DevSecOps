pipeline {
    agent {
        label 'EC2-Agent'
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    environment {
        NODE_ENV = 'development'
    }

    stages {
        stage('Welcome') {
            steps {
                echo 'Welcome to the CI pipeline for the backend JavaScript application!'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install --silent'
            }
        }

        stage('SonarQube - SAST') {
            steps {
                script {
                    try {
                        withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
                            sh './run-sonar.sh'
                        }
                        echo "SonarQube analysis completed successfully."
                    } catch (Exception e) {
                        error "SonarQube analysis failed: ${e.message}"
                    }
                }
            }
        }

        stage('OwaspZap - SCAN') {
            steps {
                dependencyCheck additionalArguments: ''' 
                    -o './'
                    -s './'
                    -f 'ALL' 
                    --prettyPrint''', 
                    odcInstallation: 'OWASP Dependency-Check Vulnerabilities'
                
                dependencyCheckPublisher pattern: 'dependency-check-report.xml'
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
    }
}
