pipeline {
    agent {
        label 'EC2-Agent'
    }
    
    options {
        timeout(time: 60, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    
    environment {
        NODE_ENV = 'development'
        ARTIFACT_NAME = "backend-artifact-${BUILD_NUMBER}.tar.gz"
        ARTIFACT_PATH = "${WORKSPACE}/artifacts"
    }
    
    stages {
        stage('Welcome') {
            steps {
                echo '''
                ╔═══════════════════════════════════════════════════╗
                ║ 🚀 Backend JavaScript Application CI Pipeline    ║
                ╚═══════════════════════════════════════════════════╝
                '''
                echo 'Initiating Continuous Integration for backend application.'
                echo 'Performing comprehensive code quality, security, and artifact creation checks.'
            }
        }
        
        stage('Parallel Init Tasks') {
            parallel {
                stage('Install Dependencies') {
                    steps {
                        sh 'npm install --silent'
                    }
                }
                
                stage('Build Artifact') {
                    steps {
                        script {
                            // Create artifacts directory if it doesn't exist
                            sh "mkdir -p ${ARTIFACT_PATH}"
                            
                            // Create artifact with comprehensive exclusions
                            sh """
                                tar -czvf ${ARTIFACT_PATH}/${ARTIFACT_NAME} \
                                --exclude='.git' \
                                --exclude='node_modules' \
                                --exclude='artifacts' \
                                --exclude='Jenkinsfiles' \
                                --exclude='.gitignore' \
                                --exclude='push_to_ghcr.sh' \
                                --exclude='run-sonar.sh' \
                                --exclude='*.log' \
                                --exclude='*.md' \
                                --exclude='dockerfile' \
                                --exclude='App-Production' \
                                .
                            """
                            
                            // Here we are Verifying the artifact creation
                            sh "ls -lh ${ARTIFACT_PATH}"
                        }
                    }
                    post {
                        success {
                            archiveArtifacts artifacts: "artifacts/${ARTIFACT_NAME}", 
                                             fingerprint: true, 
                                             onlyIfSuccessful: true
                        }
                    }
                }
            }
        }
        
        stage('SonarQube - SAST Analysis') {
            steps {
                script {
                    try {
                        withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
                          sh './run-sonar.sh'
                        }
                        echo "✅ SonarQube analysis completed successfully."
                    } catch (Exception e) {
                        echo "❌ SonarQube analysis encountered an issue: ${e.message}"
                    }
                }
            }
        }
        
        stage('OWASP Dependency-Check') {
            steps {
                script {
                    try {
                        dependencyCheck(
                            additionalArguments: '''
                                -o ./dependency-check-report 
                                -s ./ 
                                -f 'ALL' 
                                --prettyPrint 
                                --log dependency-check.log
                            ''',
                            odcInstallation: 'OWASP Dependency-Check Vulnerabilities'
                        )
                        
                        dependencyCheckPublisher(
                            pattern: 'dependency-check-report/dependency-check-report.xml'
                        )
                        
                        echo "✅ Dependency Check completed successfully."
                    } catch (Exception e) {
                        echo "❌ Dependency Check encountered an issue: ${e.message}"
                    }
                }
            }
            post {
                always {
                    publishHTML(
                        target: [
                            reportName: 'Dependency Check Report',
                            reportDir: 'dependency-check-report',
                            reportFiles: 'dependency-check-report.html',
                            keepAll: true,
                            alwaysLinkToLastBuild: true,
                            allowMissing: false
                        ]
                    )
                }
            }
        }

        stage('Docker Build and Push to GHCR') {
            steps {
                script {
                    try {
                        echo '''
                        ╔═══════════════════════════════════════════════════╗
                        ║ 🐳 Building and Pushing Docker Image to GHCR    ║
                        ╚═══════════════════════════════════════════════════╝
                        '''
                        
                        withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                            // Make the script executable
                            sh 'chmod +x ./ghcr_deploy.sh'
                            // Execute the script
                            sh './ghcr_deploy.sh'
                        }
                        echo "✅ Docker image successfully built and pushed to GHCR."
                    } catch (Exception e) {
                        error "❌ Failed to build or push Docker image: ${e.message}"
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo '''
            ╔═══════════════════════════════════════════════════╗
            ║ ✨ CI Pipeline Completed Successfully            ║
            ╚═══════════════════════════════════════════════════╝
            '''
            echo "Artifact created: ${ARTIFACT_NAME}"
            echo "Docker image pushed to GHCR successfully"
            echo "Ready for further deployment and testing."
        }
        
        failure {
            echo '''
            ╔═══════════════════════════════════════════════════╗
            ║ ❌ CI Pipeline Encountered Issues               ║
            ╚═══════════════════════════════════════════════════╝
            '''
            echo "Please review the pipeline logs for detailed error information."
        }
        
        always {
            // Clean up workspace
            cleanWs()
        }
    }
}
