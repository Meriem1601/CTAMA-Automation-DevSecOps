pipeline {
    agent {
        label 'EC2-Agent'
    }
    options {
        timeout(time: 60, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    environment {
        NODE_ENV = 'development'
    }
    stages {
        stage('Welcome') {
            steps {
                echo 'Welcome to the Continuous Integration pipeline for the backend JavaScript application. This pipeline will perform code analysis, security scanning, and other quality checks to ensure the application is secure and maintainable.'
            }
        }
        stage('Install Dependencies') {
            steps {
                sh 'npm install --silent'
            }
        }
        stage('SonarQube - SAST') {
            steps {
                script {
                    try {
                        withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
                            sh './run-sonar.sh'
                        }
                        echo "SonarQube analysis completed successfully."
                    } catch (Exception e) {
                        error "SonarQube analysis failed: ${e.message}"
                    }
                }
            }
        }
        stage('OWASP Dependency-Check Vulnerabilities') {
            steps {
                // Create output directory
                sh 'mkdir -p dependency-check-reports'
                
                // Run Dependency Check
                dependencyCheck(
                    additionalArguments: '''
                        -s ./ 
                        -f XML 
                        -f HTML 
                        -o dependency-check-reports 
                        --prettyPrint
                        --failOnCVSS 60
                    ''',
                    odcInstallation: 'OWASP Dependency-Check Vulnerabilities'
                )
                
                // Publish the report without any failure conditions
                dependencyCheckPublisher(
                    pattern: 'dependency-check-reports/dependency-check-report.xml'
                )
            }
        }
    }
    post {
        success {
            echo 'The CI pipeline has completed successfully. The application is ready for further deployment and testing.'
        }
        failure {
            echo 'The CI pipeline has encountered an issue. Please check the logs for more information.'
        }
        always {
            // Archive the dependency check reports
            archiveArtifacts artifacts: 'dependency-check-reports/*', allowEmptyArchive: true
        }
    }
}
