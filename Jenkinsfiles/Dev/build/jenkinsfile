pipeline {
    agent {
        label 'EC2-Agent'
    }
    
    options {
        timeout(time: 60, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }
    
    environment {
        NODE_ENV = 'development'
        ARTIFACT_NAME = "backend-artifact-${BUILD_NUMBER}.tar.gz"
        ARTIFACT_PATH = "${WORKSPACE}/artifacts"
        TRIVY_REPORTS_DIR = "${WORKSPACE}/trivy-reports"
    }
    
    stages {
        stage('Welcome') {
            steps {
                echo '''
                ╔═══════════════════════════════════════════════════╗
                ║ 🚀 Backend JavaScript Application CI Pipeline    ║
                ╚═══════════════════════════════════════════════════╝
                '''
                echo 'Initiating Continuous Integration for backend application.'
                echo 'Performing comprehensive code quality, security, and artifact creation checks.'
            }
        }
        
        stage('Build Artifact') {
            parallel {
                stage('Install Dependencies') {
                    steps {
                        sh 'npm install --silent'
                    }
                }
                
                stage('Create Artifact') {
                    steps {
                        script {
                            // Create artifacts directory if it doesn't exist
                            sh "mkdir -p ${ARTIFACT_PATH}"
                            
                            // Create artifact with comprehensive exclusions
                            sh """
                                tar -czvf ${ARTIFACT_PATH}/${ARTIFACT_NAME} \
                                --exclude='.git' \
                                --exclude='node_modules' \
                                --exclude='artifacts' \
                                --exclude='Jenkinsfiles' \
                                --exclude='.gitignore' \
                                --exclude='push_to_ghcr.sh' \
                                --exclude='run-sonar.sh' \
                                --exclude='*.log' \
                                --exclude='*.md' \
                                --exclude='dockerfile' \
                                --exclude='App-Production' \
                                .
                            """
                            
                            // Here we are Verifying the artifact creation
                            sh "ls -lh ${ARTIFACT_PATH}"
                        }
                    }
                    post {
                        success {
                            archiveArtifacts artifacts: "artifacts/${ARTIFACT_NAME}", 
                                             fingerprint: true, 
                                             onlyIfSuccessful: true
                        }
                    }
                }
            }
        }
        
        stage('SonarQube - SAST Analysis') {
            steps {
                script {
                    try {
                        withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
                          sh './run-sonar.sh'
                        }
                        echo "✅ SonarQube analysis completed successfully."
                    } catch (Exception e) {
                        echo "❌ SonarQube analysis encountered an issue: ${e.message}"
                    }
                }
            }
        }
        
      
