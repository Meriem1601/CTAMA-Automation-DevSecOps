pipeline {
    agent {
        label 'EC2-Agent'
    }

    options {
        timeout(time: 60, unit: 'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    environment {
        NODE_ENV = 'development'
        ARTIFACT_NAME = "backend-artifact-${BUILD_NUMBER}.tar.gz"
        ARTIFACT_PATH = "${WORKSPACE}/artifacts"
        TRIVY_REPORTS_DIR = "${WORKSPACE}/trivy-reports"
        SLACK_CHANNEL = '#were-building-a-cutting-edge-devsecops-solution'
    }

    stages {
        stage('Welcome') {
            steps {
                echo '''
                ╔═══════════════════════════════════════════════════╗
                ║ 🚀 Backend JavaScript Application CI Pipeline    ║
                ╚═══════════════════════════════════════════════════╝
                '''
                echo 'Initiating Continuous Integration for backend application.'
                echo 'Performing comprehensive code quality, security, and artifact creation checks.'
            }
        }

        stage('Build Artifact') {
            parallel {
                stage('Install Dependencies') {
                    steps {
                        sh 'npm install --silent'
                    }
                }

                stage('Create Artifact') {
                    steps {
                        script {
                            sh "mkdir -p ${ARTIFACT_PATH}"
                            
                            sh """
                                tar -czvf ${ARTIFACT_PATH}/${ARTIFACT_NAME} \
                                --exclude='.git' \
                                --exclude='node_modules' \
                                --exclude='artifacts' \
                                --exclude='Jenkinsfiles' \
                                --exclude='.gitignore' \
                                --exclude='push_to_ghcr.sh' \
                                --exclude='run-sonar.sh' \
                                --exclude='*.log' \
                                --exclude='*.md' \
                                --exclude='dockerfile' \
                                --exclude='App-Production' \
                                . 
                            """
                            
                            sh "ls -lh ${ARTIFACT_PATH}"
                        }
                    }
                    post {
                        success {
                            archiveArtifacts artifacts: "artifacts/${ARTIFACT_NAME}", 
                                             fingerprint: true, 
                                             onlyIfSuccessful: true
                        }
                    }
                }
            }
        }

        stage('SonarQube - SAST Analysis') {
            steps {
                script {
                    try {
                        withCredentials([string(credentialsId: 'sonarqube-token', variable: 'SONAR_TOKEN')]) {
                            sh 'chmod +x Sonar_codeQuaity.sh'
                            sh './Sonar_codeQuaity.sh'
                        }
                        echo "✅ SonarQube analysis completed successfully."
                    } catch (Exception e) {
                        echo "❌ SonarQube analysis encountered an issue: ${e.message}"
                        error "SonarQube analysis failed: ${e.message}"
                    }
                }
            }
        }

        stage('OWASP Dependency-Check') {
            steps {
                script {
                    try {
                        dependencyCheck(
                            additionalArguments: '''
                                -o ./dependency-check-report 
                                -s ./ 
                                -f 'ALL' 
                                --prettyPrint 
                                --log dependency-check.log
                                --noupdate
                            ''',
                            odcInstallation: 'OWASP Dependency-Check Vulnerabilities'
                        )
                        
                        dependencyCheckPublisher(
                            pattern: 'dependency-check-report/dependency-check-report.xml'
                        )
                        
                        echo "✅ Dependency Check completed successfully."
                    } catch (Exception e) {
                        echo "❌ Dependency Check encountered an issue: ${e.message}"
                    }
                }
            }
            post {
                always {
                    publishHTML(
                        target: [
                            reportName: 'Dependency Check Report',
                            reportDir: 'dependency-check-report',
                            reportFiles: 'dependency-check-report.html',
                            keepAll: true,
                            alwaysLinkToLastBuild: true,
                            allowMissing: false
                        ]
                    )
                }
            }
        }

        stage('Docker Build and Push to GHCR') {
            steps {
                script {
                    try {
                        echo '''
                        ╔═══════════════════════════════════════════════════╗
                        ║ 🐳 Building and Pushing Docker Image to GHCR    ║
                        ╚═══════════════════════════════════════════════════╝
                        '''
                        
                        withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                            sh 'chmod +x ./ghcr_deploy.sh'
                            sh './ghcr_deploy.sh'
                        }
                        echo "✅ Docker image successfully built and pushed to GHCR."
                    } catch (Exception e) {
                        error "❌ Failed to build or push Docker image: ${e.message}"
                    }
                }
            }
        }

        stage('Trivy Security Scan') {
            steps {
                script {
                    try {
                        echo '''
                        ╔═══════════════════════════════════════════════════╗
                        ║ 🔒 Running Trivy Security Scan on Docker Image   ║
                        ╚═══════════════════════════════════════════════════╝
                        '''
                        
                        sh 'chmod +x ./trivy-scan.sh'
                        sh './trivy-scan.sh'
                        
                        echo "✅ Trivy security scan completed successfully."
                    } catch (Exception e) {
                        echo "❌ Trivy security scan encountered an issue: ${e.message}"
                        error "Trivy security scan failed: ${e.message}"
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                echo '''
                ╔═══════════════════════════════════════════════════╗
                ║ ✨ CI Pipeline Completed Successfully            ║
                ╚═══════════════════════════════════════════════════╝
                '''
                echo "The backend application has passed all stages successfully."
                echo "Artifact is ready for deployment, and security checks have been completed."
                
                slackSend(
                    channel: SLACK_CHANNEL,
                    color: 'good',
                    message: """
🎉 *CI Pipeline Successfully Completed!* 🚀

*Build Details:*
- 📦 *Artifact Created:* \`${ARTIFACT_NAME}\`
- 🔍 *SonarQube Analysis:* Passed
- 🛡️ *OWASP Dependency Check:* Completed
- 🐳 *Docker Image:* Built and Pushed to GHCR
- 🔒 *Trivy Security Scan:* Passed

*Build Information:*
- ⏱️ *Duration:* ${currentBuild.durationString}
- 👤 *Triggered By:* ${env.BUILD_USER ?: 'Automated Trigger'}
- 🔢 *Build Number:* #${env.BUILD_NUMBER}

*Quick Links:*
- 🔗 Jenkins Build: ${env.BUILD_URL}
- 📊 SonarQube Report: Available in Jenkins
- 📝 Dependency Check Report: Available in Jenkins
- 📋 Trivy Scan Report: Available in Jenkins

*Next Steps:* 
✅ Artifact is ready for deployment pipeline
"""
                )
            }
        }
        
        failure {
            script {
                echo '''
                ╔═══════════════════════════════════════════════════╗
                ║ ❌ CI Pipeline Encountered Issues                ║
                ╚═══════════════════════════════════════════════════╝
                '''
                echo "Please review the pipeline logs for detailed error information."
                
                slackSend(
                    channel: SLACK_CHANNEL,
                    color: 'danger',
                    message: """
❌ *CI Pipeline Failed!* 💥

*Error Summary:*
- 🚨 Build process encountered critical issues
- 🔍 Immediate investigation required

*Build Details:*
- *Failed Stage:* ${currentBuild.currentResult}
- *Build Number:* #${env.BUILD_NUMBER}
- ⏱️ *Duration:* ${currentBuild.durationString}
- 👤 *Triggered By:* ${env.BUILD_USER ?: 'Automated Trigger'}

*Quick Access:*
- 🔗 Failed Build: ${env.BUILD_URL}

*Recommended Actions:*
1. 🕵️ Check Jenkins console output
2. 🔍 Review stage logs
3. 📝 Check for dependency or security issues

*Need Help?* 📞 Contact the DevOps Team
"""
                )
            }
        }
        
        unstable {
            script {
                slackSend(
                    channel: SLACK_CHANNEL,
                    color: 'warning',
                    message: """
⚠️ *CI Pipeline Partially Successful* 🟨

*Status:* 🔶 Unstable Build Detected

*Build Information:*
- *Build Number:* #${env.BUILD_NUMBER}
- ⏱️ *Duration:* ${currentBuild.durationString}
- 👤 *Triggered By:* ${env.BUILD_USER ?: 'Automated Trigger'}

*Potential Issues:*
- 🧩 Some stages completed with warnings
- 🔬 Quality gates may need review
- 🛡️ Security scans may have found non-critical issues

*Quick Access:*
- 🔗 Build Details: ${env.BUILD_URL}

*Recommended Actions:*
1. 🔍 Review warning messages
2. 📊 Check quality reports
3. 🔒 Verify security scan results

*Need Assistance?* 💬 Contact the DevOps Team
"""
                )
            }
        }
        
        always {
            cleanWs()
        }
    }
}
